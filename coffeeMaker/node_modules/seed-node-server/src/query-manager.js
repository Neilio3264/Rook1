const EventEmitter = require('events')
const { isValidNode, getISOTime, robustPromiseAll, exists, unionLists } = require('./utils.js')
const got = require('got')

class QueryManager extends EventEmitter {
  constructor () {
    super()
    this.interval = 15000
    this.counter = 0
  }

  setQueryInterval (ms = 15000) {
    this.interval = ms
  }

  async query (nodeList = [], size) {
    // Assign a unique counter to each query
    this.counter < Number.MAX_SAFE_INTEGER ? this.counter++ : this.counter = 1
    const count = this.counter
    if (process.env.NODE_ENV !== 'production') console.log('DBG', `QueryManager.query ${count} started at ${getISOTime()}, querying:`, JSON.stringify(nodeList))
    const start = Date.now()
    // Fetch a new node list from the nodes in the given node list
    const newList = await fetchNewList(nodeList, size)
    // Ensure that the minimum interval time has passed before emitting 'queryInterval'
    const elapsed = Date.now() - start
    const remaining = this.interval > elapsed ? this.interval - elapsed : 0
    if (process.env.NODE_ENV !== 'production') console.log('DBG', `QueryManager.query ${count} got newList at ${getISOTime()}:`, JSON.stringify(newList))
    setTimeout(() => {
      this.emit('queryInterval', newList)
      if (process.env.NODE_ENV !== 'production') console.log('DBG', `QueryManager.query ${count} queryDone at ${getISOTime()}`)
    }, remaining)
  }
}

async function fetchNewList (nodeList, size) {
  let newList = []
  const promises = nodeList.map(node => fetchNodeList(node))
  try {
    const [results, errors] = await robustPromiseAll(promises)
    if (Array.isArray(results) && results.length > 0) {
      newList = unionLists(results).slice(0, size > 0 ? size : undefined)
    }
    if (Array.isArray(errors) && errors.length > 0) {
      errors.map(err => console.log('fetchNodeList error:', err))
    }
  } catch (err) {
    console.log('fetchNewList error:', err)
  }
  return newList
}

async function fetchNodeList (node) {
  const url = `http://${node.ip}:${node.port}/seednodes`
  let response
  try {
    response = await got(url, { json: true, timeout: 5000 })
  } catch (err) {
    throw err
  }
  const seedNodes = response.body.seedNodes
  if (exists(seedNodes) && Array.isArray(seedNodes)) {
    if (seedNodes.every(isValidNode)) {
      return seedNodes
    }
  }
  throw new Error(`Received unexpected data from node:\n${JSON.stringify(response.body, null, 2)}`)
}

if (!QueryManager.instance) {
  QueryManager.instance = new QueryManager()
}

module.exports = QueryManager.instance
