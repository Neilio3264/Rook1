const { resolve } = require('path')
const { existsSync } = require('fs')

const opts = {}
if (!existsSync(resolve(process.cwd(), '.env'))) {
  opts.path = resolve(__dirname, './.env')
}
require('dotenv').config(opts)

const express = require('express')
const bodyParser = require('body-parser')
const cors = require('cors')
const ListManager = require('./src/list-manager.js')
const QueryManager = require('./src/query-manager.js')
const { exists, isValidNodeInfo, parseNodeInfo } = require('./src/utils.js')

console.log(process.env)
if (process.env.LIST_SIZE) process.env.LIST_SIZE = Number(process.env.LIST_SIZE)

const app = express()
ListManager.init({
  hashKey: process.env.HASH_KEY,
  netAdmin: {
    publicKey: process.env.NET_ADMIN_PUBLIC_KEY,
    secretKey: process.env.NET_ADMIN_SECRET_KEY
  }
})
QueryManager.setQueryInterval(process.env.QUERY_INTERVAL * 1000)

app.use(cors())

// ROUTES ---

/**
 * GET: Returns a signed seed node list
 */
app.get('/api/seednodes', function (req, res) {
  if (process.env.NODE_ENV !== 'production') console.log('DBG', 'GET /api/seednodes')
  res.json(ListManager.signedList)
})

/**
 * POST: Gets nodeInfo from requester, returns a signed seed node list
 * If seed node list is empty, adds 1st requesters info to seed node list
 */
const jsonParser = bodyParser.json()
app.post('/api/seednodes', jsonParser, function (req, res) {
  if (process.env.NODE_ENV !== 'production') console.log('DBG', 'POST /api/seednodes', JSON.stringify(req.body))
  const nodeInfo = req.body.nodeInfo
  if (ListManager.list.length < 1 && exists(nodeInfo) && isValidNodeInfo(nodeInfo)) {
    const firstNode = parseNodeInfo(nodeInfo)
    if (process.env.NODE_ENV !== 'production') console.log('DBG', 'Got first node!')
    ListManager.setList([firstNode])
    // Trigger the first 'queryInterval'
    QueryManager.query(ListManager.list, process.env.LIST_SIZE)
  }
  res.json(ListManager.signedList)
})

// 404 handler
app.use(function (req, res, next) {
  res.status(404).send("404: Sorry can't find that!")
})

// Error handler
app.use(function (err, req, res, next) {
  console.error(err)
  res.status(500).send('500: Something broke!')
})

// Start the server
app.listen(process.env.PORT, process.env.HOST, (err) => {
  if (err) {
    console.error(err)
    throw err
  }

  /**
   * Listen for the 'queryInterval' event to query the nodes in your node list
   * Update your node list with the results
   */
  QueryManager.on('queryInterval', function (newList) {
    const newLen = newList.length
    const currLen = ListManager.list.length
    /**
     * If the current list is <= 3, don't make it any smaller than it is
     * If the current list is > 3, don't let it get smaller than 3
     */
    if (currLen <= 3) {
      if (newLen >= currLen) {
        // Update your node list
        ListManager.setList(newList)
      }
    } else {
      if (newLen >= 3) {
        // Update your node list
        ListManager.setList(newList)
      }
    }
    // Trigger the next 'queryInterval'
    QueryManager.query(ListManager.list, process.env.LIST_SIZE)
  })

  console.log(`Server started on port ${process.env.PORT}`)
})
